version: '3.8'

networks:
  microservices-network:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:8.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:8.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - microservices-network
  
  mongo:
    image: "mongo:6.0"
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - microservices-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet mongodb://root:password@mongo:27017/db || exit 1
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  postgres:
    image: "postgres:15"
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d postgres"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  config-server:
    build: ./config-server
    ports:
      - "8101:8101"
    depends_on:
      - kafka
    networks:
      - microservices-network

  discovery-server:
    build: ./discovery-server
    ports:
      - "8001:8001"
    depends_on:
      - config-server
    networks:
      - microservices-network

  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - config-server
      - discovery-server
    networks:
      - microservices-network

  auth-service:
    build: ./auth-service
    ports:
      - "9002:9002"
    depends_on:
      - config-server
      - discovery-server
      - postgres
    networks:
      - microservices-network

  user-service:
    build: ./user-service
    ports:
      - "9003:9003"
    depends_on:
      - config-server
      - discovery-server
      - postgres
    networks:
      - microservices-network

  data-analysis-service:
    build: ./data-analysis-service
    ports:
      - "9000:9000"
    depends_on:
      - config-server
      - discovery-server
      - mongo
      - kafka
    networks:
      - microservices-network

  data-retrieval-service:
    build: ./data-retrieval-service
    ports:
      - "9004:9004"
    depends_on:
      - config-server
      - discovery-server
      - mongo
      - kafka
    networks:
      - microservices-network

  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-network

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - microservices-network
